[["index.html", "Libro Personal de Apuntes Prefacio 0.1 Estructura del libro 0.2 Agradecimientos", " Libro Personal de Apuntes Hecho por Esteban Rucán Carrasco Prefacio Hola, mi nombre es Esteban Rucán, actual estudiante de cuarto año de la carrera de Estadística en la Pontificia Universidad Católica de Chile. Agradezco que hayas ingresado a mi libro personal. En él encontrarás apuntes de diversos temas que he realizado con mucha dedicación, con el fin de poder contribuir a quien lo necesite. Si este es tu caso, espero que disfrutes el material disponible. ¡Si tienes alguna sugerencia o duda no dudes en escribirme a mi correo!. 0.1 Estructura del libro El libro contiene apuntes enfocados principalmente en el lenguaje R, por lo que la mayoría de su contenido esta enfocado en este. Podrás navegar entre diversos tópicos sobre el lenguaje desde la barra lateral. También está habilitado un modo oscuro y un selector de fuente. 0.2 Agradecimientos Sin duda, todos los conocimietos que tengo de R se los debo a los docentes que me han realizado clases, en conjunto a muchas plataformas para practicar el software. En la próxima página encontrarás algunas páginas y libros interesantes, todo libre de Copyright. "],["recomendaciones.html", "Capítulo 1 Recomendaciones 1.1 Libros 1.2 Páginas web 1.3 Canales de Youtube 1.4 Aprendizaje interactivo", " Capítulo 1 Recomendaciones En esta sección te recomendaré una serie de libros y paginas web, para que de esta forma, expandas tus conocimientos de Programación, R y Estadística. 1.1 Libros Learn the tidyverse Mastering Software Development in R 1.2 Páginas web Documentación de R Traducción de R4DS: R para Ciencias de Datos Advanced R R Packages Interactive web-based data visualization with R, plotly, and shiny Do More with R TidyTuesday Julia Silge R-Ladies Global 1.3 Canales de Youtube StatQuest with Josh Starmer RStudio Bruno Rodrigues LatinR IDG TECHtalk 1.4 Aprendizaje interactivo HackerRank DataCamp "],["guiaestilo.html", "Capítulo 2 Guía de Estilo 2.1 Directorio 2.2 Archivos del directorio 2.3 Asignación de variables 2.4 Operadores 2.5 Paréntesis 2.6 Comas 2.7 Punto y coma 2.8 Packages 2.9 Cantidad de código por fila", " Capítulo 2 Guía de Estilo Esta guía la realice con el fin de que puedas programar tu código de la forma más ordenada posible, logrando que sea comprensible por los demás. Puedes inventar tus propias reglas, para acostumbrarte a programar bajo diferentes normas. Basada en la guía de estilo de tidyverse y PEP 8. 2.1 Directorio Siempre usaremos un directorio que nos aporte una ruta relativa. Lo haremos a través de la creación de proyectos. 2.2 Archivos del directorio Los archivos del directorio serán nombrados usando guiones medios o guiones bajos en vez de espacios y letras minúsculas. Tampoco usaremos caracteres especiales como los tildes. Usaremos fecha de creación (en formato ISO 8601) y nombres explicativos. Ejemplo: # Guardamos un archivo &#39;csv&#39; en el directorio # Mal data(iris) write.csv(iris, &#39;base.csv&#39;) # Bien data(iris) write.csv(iris, &#39;2021-03-26_iris-sin-procesar.csv&#39;) 2.3 Asignación de variables Usaremos el formato snake_case para nombrar variables, o sea, escritas en minúsculas, sin caracteres especiales (como el punto) y creando espacios mediante guiones bajos. Para asignar variables usaremos el operador &lt;- en vez de =. Solo usaremos = para definir argumentos dentro de funciones. Preferiremos nombres de variables informativos. Ejemplo: # Mal String.Hola = &#39;Hola mundo&#39; # Bien string_hola &lt;- &#39;Hola mundo&#39; 2.4 Operadores Siempre usaremos espacios a los lados de los operadores. Ejemplo: # Mal suma&lt;-3*5+2&lt;=24^2 # Bien suma &lt;- 3 * 5 + 2 &lt;= 24 ^ 2 2.5 Paréntesis Para las funciones for, while, function, if y else if antepondremos un espacio antes de usar paréntesis. Después de cerrar paréntesis en estas funciones, haremos un espacio y pondremos solo la llave de apertura en la misma línea, y abajo pondremos la llave de cierre. Ejemplo: # Mal for(i in 1:5){runif(i) print(i)} # Bien for (i in 1:5) { runif(i) print(i) } 2.6 Comas Después de escribir una coma, adicionamos un espacio. Ejemplo: # Mal notas_epg3308 &lt;- c(NA,6.5,7,5.2) promedio_de_notas &lt;- mean(notas_epg3308,na.rm = TRUE) # Bien notas_epg3308 &lt;- c(NA, 6.5, 7, 5.2) promedio_de_notas &lt;- mean(notas_epg3308, na.rm = TRUE) 2.7 Punto y coma No usaremos una linea para realizar más de una ejecución usando ;. Ejemplo # Mal valores_aleatorios &lt;- runif(10); mean(valores_aleatorios) # Bien valores_aleatorios &lt;- runif(10) mean(valores_aleatorios) 2.8 Packages Declararemos explícitamente los nombres de los packages de procedencia al momento de usar una función, a excepción de los packages que se cargan automáticamente al iniciar R y packages que permiten utilizar pipes (por ejemplo: %&gt;%). Ejemplo: data(iris) # Mal require(magrittr) require(dplyr) filtro_sepal_length &lt;- iris %&gt;% filter(Sepal.Length &gt;= 7.4) %&gt;% arrange(Sepal.Length) # Bien require(magrittr) filtro_sepal_length &lt;- iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7.4) %&gt;% dplyr::arrange(Sepal.Length) 2.9 Cantidad de código por fila Esta no debe exceder los 80 caracteres (es posible añadir una línea vertical a RStudio para tener una referencia de los 80 caracteres). Algunas buenas prácticas es separar en líneas los argumentos de una función, o separar en líneas la utilización de pipes. Ejemplo: # Mal require(magrittr) data(iris) iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7) %$% plot(x = Sepal.Length, y = Sepal.Width, main = &#39; Gráfico de Sepal&#39;) # Bien iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7) %$% plot(x = Sepal.Length, y = Sepal.Width, main = &#39; Gráfico de Sepal&#39;) "],["transformación-de-datos.html", "Capítulo 3 Transformación de datos 3.1 Importar un data frame en R 3.2 El package magrittr 3.3 El package dplyr 3.4 Actividades", " Capítulo 3 Transformación de datos 3.1 Importar un data frame en R En vez de escribir nuestro directorio como data//covid//owid-covid-data.csv, podemos usar lo siguiente gracias al package here: # install.packages(&quot;vroom&quot;) # install.packages(&quot;here&quot;) data &lt;- vroom::vroom(here::here(&quot;data&quot;, &quot;covid&quot;, &quot;owid-covid-data.csv&quot;)) El package vroom acepta cualquier formato de archivo. 3.2 El package magrittr install.packages(&quot;maggritr&quot;) require(magrittr) Nos permite usar el famoso pipe %&gt;%. Es una forma más moderna y ordenada para programar en R. Usa la memoria del sistema de forma más eficiente. Se hace con CTRL o CMD + SHIFT + M. Su uso más común es para explorar bases de datos. 3.2.1 Ejemplos 3.2.1.1 \\(\\,\\) En vez de hacer: apply((matrix(1:100, ncol = 2)), 2, mean) [1] 25.5 75.5 Podemos hacer: 1:100 %&gt;% # Crear vector del 1 al 100 matrix(ncol = 2) %&gt;% # Crear una matriz con 2 columnas apply(2, mean) # Aplicar función mean a columnas [1] 25.5 75.5 Se ve mucho más  ordenado . 3.2.1.2 \\(\\,\\) Esto nos dará error 1:5 %&gt;% * 5 %&gt;% mean() Debemos hacer: 1:5 %&gt;% &quot;*&quot; (5) %&gt;% mean() [1] 15 Admite operadores como +, -, \"*\" y /. El valor numérico debe ir siempre entre paréntesis. 3.2.2 \\(\\,\\) Podemos crear una variable y después realizarle una modificación. suma_y_media &lt;- 1:10 %&gt;% &quot;+&quot; (50) suma_y_media [1] 51 52 53 54 55 56 57 58 59 60 Ahora calculamos la media: suma_y_media &lt;- suma_y_media %&gt;% mean() suma_y_media [1] 55.5 3.3 El package dplyr install.packages(&quot;dplyr&quot;) require(dplyr) Es una potente herramienta en conjunto a magrittr para analizar datos en R. Sus principales funciones son filter, group_by, summarize, mutate, arrange y select. 3.3.1 filter Sirve para indicarle a R que seleccione solo las filas que cumplan la condición que establezcamos. Ejemplo: Para empezar, veamos el tipo de variables de la base de datos iris. str(iris) &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Ahora usemos la función filter para ver tuplas que solo tengan la variable Sepal.Length mayor o igual a 7.4: filtro_Sepal.Length &lt;- iris %&gt;% filter(Sepal.Length &gt;= 7.4) filtro_Sepal.Length %&gt;% reactable::reactable() # Para visualizar tablas de forma interactiva 3.3.2 group_by &amp; summarize Ambas deben ser usadas en conjunto. group_by: Sirve para agrupar según una variable categórica. Puede recibir más de una variable, según la necesidad que se tenga. summarize: Para mostrar la información que necesitamos ver después de usar group_by. Ejemplo: Veamos la media de Sepal.Length y Sepal.Width para cada especie. group_by_Species &lt;- iris %&gt;% group_by(Species) %&gt;% # Agrupamos según especie summarize(mean_Sepal.Width = mean(Sepal.Width), mean_Sepal.Length = mean(Sepal.Length)) # Información que necesitamos ver de cada Especie group_by_Species %&gt;% reactable::reactable() # Vizualizamos 3.3.3 mutate Podemos crear una variable nueva en la base de datos a partir de variables ya existentes. Ejemplo: Creamos una base de datos que en su última columna tenga información sobre la suma de Sepal.Length y Sepal.Width para cada tupla. mutate_iris &lt;- iris %&gt;% mutate(Sepal.Sum = Sepal.Length + Sepal.Width) # Creamos una variable Sepal.Sum mutate_iris %&gt;% reactable::reactable() Vemos que se creo una variable nueva al final de la base. 3.3.4 arrange Sirve para ordenar las columnas de la base de datos en orden ascendente o descendente. Se puede seleccionar más de una variable, según la necesidad que se tenga. Para ordenar las columnas de la base es necesario llamar a la función desc. Ejemplo: Para ordenar la columna de la variable Sepal.Width en orden ascendente: arrange_asc &lt;- iris %&gt;% arrange(Sepal.Width) arrange_asc %&gt;% reactable::reactable() Ordenar la columna Species en orden descendente: arrange_desc &lt;- iris %&gt;% arrange(desc(Species)) arrange_desc %&gt;% reactable::reactable() 3.3.5 select Sirve para seleccionar o no seleccionar variables de la base de datos. Para no seleccionar una variable hay que anteponer un signo ! y un vector con los nombres de las variables. Ejemplo: Para seleccionar variables: select_Sepal &lt;- iris %&gt;% select(Sepal.Length, Sepal.Width) # Alternativamente select(matches(&quot;Sepal&quot;)) select_Sepal %&gt;% reactable::reactable() Para no seleccionar variables: not_select_Sepal &lt;- iris %&gt;% select(!c(Sepal.Length, Sepal.Width)) # Alternativamente select(!matches(&quot;Sepal&quot;)) not_select_Sepal %&gt;% reactable::reactable() Podemos ver que están todas las variables menos las que escribimos en la función select. 3.4 Actividades Cargue la base de datos con información sobre el coronavirus desde https://ourworldindata.org/coronavirus-testing. Luego muestre el tipo de cada variable de la base. ¿Cuál es la media de casos en Chile en el mes de enero de 2021? Genere una tabla con la cantidad de test hechos en los países de América del Sur en el último mes, ordenado de menor a mayor. ¿Cuál es el país con mayor cantidad de casos por millón de habitantes en Europa desde el inicio de la pandemia? ¿Y el segundo? Muestre información sobre la cantidad de casos que han habido en las últimas 2 semanas en cada continente. 3.4.1 Solución 3.4.1.1 Actividad 1 require(ggplot2); require(gghighlight); require(magrittr); require(dplyr) data &lt;- vroom::vroom(here::here(&quot;data&quot;, &quot;covid&quot;, &quot;owid-covid-data.csv&quot;)) data %&gt;% str() spec_tbl_df[,59] [78,664 x 59] (S3: spec_tbl_df/tbl_df/tbl/data.frame) $ iso_code : chr [1:78664] &quot;AFG&quot; &quot;AFG&quot; &quot;AFG&quot; &quot;AFG&quot; ... $ continent : chr [1:78664] &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; ... $ location : chr [1:78664] &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; ... $ date : Date[1:78664], format: &quot;2020-02-24&quot; ... $ total_cases : num [1:78664] 1 1 1 1 1 1 1 1 2 4 ... $ new_cases : num [1:78664] 1 0 0 0 0 0 0 0 1 2 ... $ new_cases_smoothed : num [1:78664] NA NA NA NA NA 0.143 0.143 0 0.143 0.429 ... $ total_deaths : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_smoothed : num [1:78664] NA NA NA NA NA 0 0 0 0 0 ... $ total_cases_per_million : num [1:78664] 0.026 0.026 0.026 0.026 0.026 0.026 0.026 0.026 0.051 0.103 ... $ new_cases_per_million : num [1:78664] 0.026 0 0 0 0 0 0 0 0.026 0.051 ... $ new_cases_smoothed_per_million : num [1:78664] NA NA NA NA NA 0.004 0.004 0 0.004 0.011 ... $ total_deaths_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_smoothed_per_million : num [1:78664] NA NA NA NA NA 0 0 0 0 0 ... $ reproduction_rate : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ icu_patients : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ icu_patients_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ hosp_patients : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ hosp_patients_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_icu_admissions : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_icu_admissions_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_hosp_admissions : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_hosp_admissions_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_tests : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_tests_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_smoothed : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_smoothed_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ positive_rate : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ tests_per_case : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ tests_units : chr [1:78664] NA NA NA NA ... $ total_vaccinations : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_vaccinated : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_fully_vaccinated : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations_smoothed : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_vaccinations_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_vaccinated_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_fully_vaccinated_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations_smoothed_per_million: num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ stringency_index : num [1:78664] 8.33 8.33 8.33 8.33 8.33 ... $ population : num [1:78664] 38928341 38928341 38928341 38928341 38928341 ... $ population_density : num [1:78664] 54.4 54.4 54.4 54.4 54.4 ... $ median_age : num [1:78664] 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 ... $ aged_65_older : num [1:78664] 2.58 2.58 2.58 2.58 2.58 ... $ aged_70_older : num [1:78664] 1.34 1.34 1.34 1.34 1.34 ... $ gdp_per_capita : num [1:78664] 1804 1804 1804 1804 1804 ... $ extreme_poverty : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ cardiovasc_death_rate : num [1:78664] 597 597 597 597 597 ... $ diabetes_prevalence : num [1:78664] 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 ... $ female_smokers : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ male_smokers : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ handwashing_facilities : num [1:78664] 37.7 37.7 37.7 37.7 37.7 ... $ hospital_beds_per_thousand : num [1:78664] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... $ life_expectancy : num [1:78664] 64.8 64.8 64.8 64.8 64.8 ... $ human_development_index : num [1:78664] 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 ... - attr(*, &quot;spec&quot;)= .. cols( .. iso_code = col_character(), .. continent = col_character(), .. location = col_character(), .. date = col_date(format = &quot;&quot;), .. total_cases = col_double(), .. new_cases = col_double(), .. new_cases_smoothed = col_double(), .. total_deaths = col_double(), .. new_deaths = col_double(), .. new_deaths_smoothed = col_double(), .. total_cases_per_million = col_double(), .. new_cases_per_million = col_double(), .. new_cases_smoothed_per_million = col_double(), .. total_deaths_per_million = col_double(), .. new_deaths_per_million = col_double(), .. new_deaths_smoothed_per_million = col_double(), .. reproduction_rate = col_double(), .. icu_patients = col_double(), .. icu_patients_per_million = col_double(), .. hosp_patients = col_double(), .. hosp_patients_per_million = col_double(), .. weekly_icu_admissions = col_double(), .. weekly_icu_admissions_per_million = col_double(), .. weekly_hosp_admissions = col_double(), .. weekly_hosp_admissions_per_million = col_double(), .. new_tests = col_double(), .. total_tests = col_double(), .. total_tests_per_thousand = col_double(), .. new_tests_per_thousand = col_double(), .. new_tests_smoothed = col_double(), .. new_tests_smoothed_per_thousand = col_double(), .. positive_rate = col_double(), .. tests_per_case = col_double(), .. tests_units = col_character(), .. total_vaccinations = col_double(), .. people_vaccinated = col_double(), .. people_fully_vaccinated = col_double(), .. new_vaccinations = col_double(), .. new_vaccinations_smoothed = col_double(), .. total_vaccinations_per_hundred = col_double(), .. people_vaccinated_per_hundred = col_double(), .. people_fully_vaccinated_per_hundred = col_double(), .. new_vaccinations_smoothed_per_million = col_double(), .. stringency_index = col_double(), .. population = col_double(), .. population_density = col_double(), .. median_age = col_double(), .. aged_65_older = col_double(), .. aged_70_older = col_double(), .. gdp_per_capita = col_double(), .. extreme_poverty = col_double(), .. cardiovasc_death_rate = col_double(), .. diabetes_prevalence = col_double(), .. female_smokers = col_double(), .. male_smokers = col_double(), .. handwashing_facilities = col_double(), .. hospital_beds_per_thousand = col_double(), .. life_expectancy = col_double(), .. human_development_index = col_double() .. ) - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; 3.4.1.2 Actividad 2 media_casos_chile_enero_2021 &lt;- data %&gt;% filter(location == &quot;Chile&quot;) %&gt;% filter(date &gt;= &quot;2021-01-01&quot; &amp; date &lt;= &quot;2021-01-31&quot;) %&gt;% group_by(location) %&gt;% summarize(media_casos = mean(new_cases, na.rm = TRUE)) media_casos_chile_enero_2021 %&gt;% reactable::reactable() 3.4.1.3 Actividad 3 test_latinoamerica_ultimo_mes &lt;- data %&gt;% filter(continent == &quot;South America&quot;) %&gt;% filter(date &gt;= &quot;2021-01-10&quot; &amp; date &lt;= &quot;2021-02-10&quot;) %&gt;% filter(!is.na(new_tests)) %&gt;% group_by(location) %&gt;% summarize(total_test = sum(new_tests)) %&gt;% arrange(total_test) test_latinoamerica_ultimo_mes %&gt;% reactable::reactable() 3.4.1.4 Actividad 4 paises_europa_xmill &lt;- data %&gt;% filter(continent == &quot;Europe&quot;) %&gt;% filter(!is.na(new_cases_per_million)) %&gt;% group_by(location) %&gt;% summarize(cases_per_million = sum(new_cases_per_million)) %&gt;% arrange(desc(cases_per_million)) paises_europa_xmill %&gt;% reactable::reactable() 3.4.1.5 Actividad 5 casos_contientes_2_semanas &lt;- data %&gt;% filter(date &gt;= &quot;2021-01-27&quot; &amp; date &lt;= &quot;2021-02-10&quot;) %&gt;% filter(!is.na(new_cases)) %&gt;% group_by(continent) %&gt;% summarize(casos = sum(new_cases)) casos_contientes_2_semanas %&gt;% reactable::reactable() "],["final-words.html", "Capítulo 4 Final Words", " Capítulo 4 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
