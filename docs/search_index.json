[["index.html", "Libro Personal de Apuntes Prefacio 0.1 Estructura del libro 0.2 Agradecimientos", " Libro Personal de Apuntes Hecho por Esteban Rucán Carrasco Prefacio Hola, mi nombre es Esteban Rucán, actual estudiante de cuarto año de la carrera de Estadística en la Pontificia Universidad Católica de Chile. Agradezco que hayas ingresado a mi libro personal. En él encontrarás apuntes de diversos temas que he realizado con mucha dedicación, con el fin de poder contribuir a quien lo necesite. Si este es tu caso, espero que disfrutes el material disponible. ¡Si tienes alguna sugerencia o duda no dudes en escribirme a mi correo!. Puedes difundir la información de este libro siempre y cuando me lo informes. 0.1 Estructura del libro El libro contiene apuntes enfocados principalmente en el lenguaje R, por lo que la mayoría de su contenido esta enfocado en este. Podrás navegar entre diversos tópicos sobre el lenguaje desde la barra lateral. También está habilitado un modo oscuro y un selector de fuente en la parte superior de tu pantalla. 0.2 Agradecimientos Sin duda, todos los conocimietos que tengo de R se los debo a los docentes que me han realizado clases, en conjunto a muchas plataformas para practicar el software. Si te identifica esta frase, te quiero dar mis sinceras gratitudes. En la próxima página encontrarás algunas páginas y libros interesantes, todo libre de Copyright. "],["recomendaciones.html", "Capítulo 1 Recomendaciones 1.1 Libros 1.2 Páginas web 1.3 Canales de Youtube 1.4 Aprendizaje interactivo", " Capítulo 1 Recomendaciones En esta sección te recomendaré una serie de libros y paginas web, para que de esta forma, expandas tus conocimientos de Programación, R y Estadística. 1.1 Libros Learn the tidyverse Mastering Software Development in R 1.2 Páginas web Documentación de R Traducción de R4DS: R para Ciencias de Datos Advanced R R Packages Interactive web-based data visualization with R, plotly, and shiny Do More with R TidyTuesday Julia Silge R-Ladies Global 1.3 Canales de Youtube StatQuest with Josh Starmer RStudio Bruno Rodrigues LatinR IDG TECHtalk 1.4 Aprendizaje interactivo HackerRank DataCamp "],["guiaestilo.html", "Capítulo 2 Guía de Estilo 2.1 Directorio 2.2 Archivos del directorio 2.3 Asignación de variables 2.4 Operadores 2.5 Paréntesis 2.6 Comas 2.7 Punto y coma 2.8 Packages 2.9 Cantidad de código por fila", " Capítulo 2 Guía de Estilo Esta guía la realice con el fin de que puedas programar tu código de la forma más ordenada posible, logrando que sea comprensible por los demás. Puedes inventar tus propias reglas, para acostumbrarte a programar bajo diferentes normas. Basada en la guía de estilo de tidyverse y PEP 8. 2.1 Directorio Siempre usaremos un directorio que nos aporte una ruta relativa. Lo haremos a través de la creación de proyectos. 2.2 Archivos del directorio Los archivos del directorio serán nombrados usando guiones medios o guiones bajos en vez de espacios y letras minúsculas. Tampoco usaremos caracteres especiales como los tildes. Usaremos fecha de creación (en formato ISO 8601) y nombres explicativos. Ejemplo: # Guardamos un archivo &#39;csv&#39; en el directorio # Mal data(iris) write.csv(iris, &#39;base.csv&#39;) # Bien data(iris) write.csv(iris, &#39;2021-03-26_iris-sin-procesar.csv&#39;) 2.3 Asignación de variables Usaremos el formato snake_case para nombrar variables, o sea, escritas en minúsculas, sin caracteres especiales (como el punto) y creando espacios mediante guiones bajos. Para asignar variables usaremos el operador &lt;- en vez de =. Solo usaremos = para definir argumentos dentro de funciones. Preferiremos nombres de variables informativos. Ejemplo: # Mal String.Hola = &#39;Hola mundo&#39; # Bien string_hola &lt;- &#39;Hola mundo&#39; 2.4 Operadores Siempre usaremos espacios a los lados de los operadores. Ejemplo: # Mal suma&lt;-3*5+2&lt;=24^2 # Bien suma &lt;- 3 * 5 + 2 &lt;= 24 ^ 2 2.5 Paréntesis Para las funciones for, while, function, if y else if antepondremos un espacio antes de usar paréntesis. Después de cerrar paréntesis en estas funciones, haremos un espacio y pondremos solo la llave de apertura en la misma línea, y abajo pondremos la llave de cierre. Ejemplo: # Mal for(i in 1:5){runif(i) print(i)} # Bien for (i in 1:5) { runif(i) print(i) } 2.6 Comas Después de escribir una coma, adicionamos un espacio. Ejemplo: # Mal notas_finales &lt;- c(NA,6.5,7,5.2) promedio_de_notas &lt;- mean(notas_finales,na.rm = TRUE) # Bien notas_finales &lt;- c(NA, 6.5, 7, 5.2) promedio_de_notas &lt;- mean(notas_finales, na.rm = TRUE) 2.7 Punto y coma No usaremos una linea para realizar más de una ejecución usando ;. Ejemplo # Mal valores_aleatorios &lt;- runif(10); mean(valores_aleatorios) # Bien valores_aleatorios &lt;- runif(10) mean(valores_aleatorios) 2.8 Packages Declararemos explícitamente los nombres de los packages de procedencia al momento de usar una función, a excepción de los packages que se cargan automáticamente al iniciar R y packages que permiten utilizar pipes (por ejemplo: %&gt;%). Ejemplo: data(iris) # Mal require(magrittr) require(dplyr) filtro_sepal_length &lt;- iris %&gt;% filter(Sepal.Length &gt;= 7.4) %&gt;% arrange(Sepal.Length) # Bien require(magrittr) filtro_sepal_length &lt;- iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7.4) %&gt;% dplyr::arrange(Sepal.Length) 2.9 Cantidad de código por fila Esta no debe exceder los 80 caracteres (es posible añadir una línea vertical a RStudio para tener una referencia de los 80 caracteres). Algunas buenas prácticas es separar en líneas los argumentos de una función, o separar en líneas la utilización de pipes. Ejemplo: # Mal require(magrittr) data(iris) iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7) %$% plot(x = Sepal.Length, y = Sepal.Width, main = &#39; Gráfico de Sepal&#39;) # Bien iris %&gt;% dplyr::filter(Sepal.Length &gt;= 7) %$% plot(x = Sepal.Length, y = Sepal.Width, main = &#39; Gráfico de Sepal&#39;) "],["transformación-de-datos-con-tidyverse.html", "Capítulo 3 Transformación de datos con Tidyverse 3.1 Importar un data frame en R 3.2 El package magrittr 3.3 El package dplyr 3.4 Actividades 3.5 Solución de Actividades", " Capítulo 3 Transformación de datos con Tidyverse En esta sección hablo sobre algunas nociones básicas de transformación de datos. Puedes acceder a una clase en video que realicé sobre este tema en el siguiente link. 3.1 Importar un data frame en R En vez de escribir nuestro directorio como data//covid//owid-covid-data.csv, podemos usar lo siguiente gracias al package here: # install.packages(&quot;vroom&quot;) # install.packages(&quot;here&quot;) data &lt;- vroom::vroom(here::here(&quot;data&quot;, &quot;covid&quot;, &quot;owid-covid-data.csv&quot;)) El package vroom acepta cualquier formato de archivo. 3.2 El package magrittr install.packages(&quot;maggritr&quot;) require(magrittr) Nos permite usar el famoso pipe %&gt;%. Es una forma más moderna y ordenada para programar en R. Usa la memoria del sistema de forma más eficiente. Se hace con CTRL o CMD + SHIFT + M. Su uso más común es para explorar bases de datos. 3.2.1 Ejemplos 3.2.1.1 \\(\\,\\) En vez de hacer: apply((matrix(1:100, ncol = 2)), 2, mean) [1] 25.5 75.5 Podemos hacer: 1:100 %&gt;% # Crear vector del 1 al 100 matrix(ncol = 2) %&gt;% # Crear una matriz con 2 columnas apply(2, mean) # Aplicar función mean a columnas [1] 25.5 75.5 Se ve mucho más  ordenado . 3.2.1.2 \\(\\,\\) Esto nos dará error 1:5 %&gt;% * 5 %&gt;% mean() Debemos hacer: 1:5 %&gt;% &quot;*&quot; (5) %&gt;% mean() [1] 15 Admite operadores como +, -, \"*\" y /. El valor numérico debe ir siempre entre paréntesis. 3.2.2 \\(\\,\\) Podemos crear una variable y después realizarle una modificación. suma_y_media &lt;- 1:10 %&gt;% &quot;+&quot; (50) suma_y_media [1] 51 52 53 54 55 56 57 58 59 60 Ahora calculamos la media: suma_y_media &lt;- suma_y_media %&gt;% mean() suma_y_media [1] 55.5 3.3 El package dplyr install.packages(&quot;dplyr&quot;) require(dplyr) Es una potente herramienta en conjunto a magrittr para analizar datos en R. Sus principales funciones son filter, group_by, summarize, mutate, arrange y select. 3.3.1 filter Sirve para indicarle a R que seleccione solo las filas que cumplan la condición que establezcamos. Ejemplo: Para empezar, veamos el tipo de variables de la base de datos iris. str(iris) &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Ahora usemos la función filter para ver tuplas que solo tengan la variable Sepal.Length mayor o igual a 7.4: filtro_Sepal.Length &lt;- iris %&gt;% filter(Sepal.Length &gt;= 7.4) filtro_Sepal.Length %&gt;% reactable::reactable() # Para visualizar tablas de forma interactiva 3.3.2 group_by &amp; summarize Ambas deben ser usadas en conjunto. group_by: Sirve para agrupar según una variable categórica. Puede recibir más de una variable, según la necesidad que se tenga. summarize: Para mostrar la información que necesitamos ver después de usar group_by. Ejemplo: Veamos la media de Sepal.Length y Sepal.Width para cada especie. group_by_Species &lt;- iris %&gt;% group_by(Species) %&gt;% # Agrupamos según especie summarize(mean_Sepal.Width = mean(Sepal.Width), mean_Sepal.Length = mean(Sepal.Length)) # Información que necesitamos ver de cada Especie group_by_Species %&gt;% reactable::reactable() # Vizualizamos 3.3.3 mutate Podemos crear una variable nueva en la base de datos a partir de variables ya existentes. Ejemplo: Creamos una base de datos que en su última columna tenga información sobre la suma de Sepal.Length y Sepal.Width para cada tupla. mutate_iris &lt;- iris %&gt;% mutate(Sepal.Sum = Sepal.Length + Sepal.Width) # Creamos una variable Sepal.Sum mutate_iris %&gt;% reactable::reactable() Vemos que se creo una variable nueva al final de la base. 3.3.4 arrange Sirve para ordenar las columnas de la base de datos en orden ascendente o descendente. Se puede seleccionar más de una variable, según la necesidad que se tenga. Para ordenar las columnas de la base es necesario llamar a la función desc. Ejemplo: Para ordenar la columna de la variable Sepal.Width en orden ascendente: arrange_asc &lt;- iris %&gt;% arrange(Sepal.Width) arrange_asc %&gt;% reactable::reactable() Ordenar la columna Species en orden descendente: arrange_desc &lt;- iris %&gt;% arrange(desc(Species)) arrange_desc %&gt;% reactable::reactable() 3.3.5 select Sirve para seleccionar o no seleccionar variables de la base de datos. Para no seleccionar una variable hay que anteponer un signo ! y un vector con los nombres de las variables. Ejemplo: Para seleccionar variables: select_Sepal &lt;- iris %&gt;% select(Sepal.Length, Sepal.Width) # Alternativamente select(matches(&quot;Sepal&quot;)) select_Sepal %&gt;% reactable::reactable() Para no seleccionar variables: not_select_Sepal &lt;- iris %&gt;% select(!c(Sepal.Length, Sepal.Width)) # Alternativamente select(!matches(&quot;Sepal&quot;)) not_select_Sepal %&gt;% reactable::reactable() Podemos ver que están todas las variables menos las que escribimos en la función select. 3.4 Actividades 3.4.1 \\(\\,\\) Cargue la base de datos con información sobre el coronavirus desde https://ourworldindata.org/coronavirus-testing. Luego muestre el tipo de cada variable de la base. 3.4.2 \\(\\,\\) ¿Cuál es la media de casos en Chile en el mes de enero de 2021? 3.4.3 \\(\\,\\) Genere una tabla con la cantidad de test hechos en los países de América del Sur en el último mes, ordenado de menor a mayor. 3.4.4 \\(\\,\\) ¿Cuál es el país con mayor cantidad de casos por millón de habitantes en Europa desde el inicio de la pandemia? ¿Y el segundo? 3.4.5 \\(\\,\\) Muestre información sobre la cantidad de casos que han habido en las últimas 2 semanas en cada continente. 3.5 Solución de Actividades 3.5.1 Actividad 1 require(ggplot2); require(gghighlight); require(magrittr); require(dplyr) data &lt;- vroom::vroom(here::here(&quot;data&quot;, &quot;covid&quot;, &quot;owid-covid-data.csv&quot;)) data %&gt;% str() spec_tbl_df[,59] [78,664 x 59] (S3: spec_tbl_df/tbl_df/tbl/data.frame) $ iso_code : chr [1:78664] &quot;AFG&quot; &quot;AFG&quot; &quot;AFG&quot; &quot;AFG&quot; ... $ continent : chr [1:78664] &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; &quot;Asia&quot; ... $ location : chr [1:78664] &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; &quot;Afghanistan&quot; ... $ date : Date[1:78664], format: &quot;2020-02-24&quot; ... $ total_cases : num [1:78664] 1 1 1 1 1 1 1 1 2 4 ... $ new_cases : num [1:78664] 1 0 0 0 0 0 0 0 1 2 ... $ new_cases_smoothed : num [1:78664] NA NA NA NA NA 0.143 0.143 0 0.143 0.429 ... $ total_deaths : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_smoothed : num [1:78664] NA NA NA NA NA 0 0 0 0 0 ... $ total_cases_per_million : num [1:78664] 0.026 0.026 0.026 0.026 0.026 0.026 0.026 0.026 0.051 0.103 ... $ new_cases_per_million : num [1:78664] 0.026 0 0 0 0 0 0 0 0.026 0.051 ... $ new_cases_smoothed_per_million : num [1:78664] NA NA NA NA NA 0.004 0.004 0 0.004 0.011 ... $ total_deaths_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_deaths_smoothed_per_million : num [1:78664] NA NA NA NA NA 0 0 0 0 0 ... $ reproduction_rate : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ icu_patients : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ icu_patients_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ hosp_patients : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ hosp_patients_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_icu_admissions : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_icu_admissions_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_hosp_admissions : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ weekly_hosp_admissions_per_million : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_tests : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_tests_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_smoothed : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_tests_smoothed_per_thousand : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ positive_rate : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ tests_per_case : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ tests_units : chr [1:78664] NA NA NA NA ... $ total_vaccinations : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_vaccinated : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_fully_vaccinated : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations_smoothed : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ total_vaccinations_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_vaccinated_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ people_fully_vaccinated_per_hundred : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ new_vaccinations_smoothed_per_million: num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ stringency_index : num [1:78664] 8.33 8.33 8.33 8.33 8.33 ... $ population : num [1:78664] 38928341 38928341 38928341 38928341 38928341 ... $ population_density : num [1:78664] 54.4 54.4 54.4 54.4 54.4 ... $ median_age : num [1:78664] 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 18.6 ... $ aged_65_older : num [1:78664] 2.58 2.58 2.58 2.58 2.58 ... $ aged_70_older : num [1:78664] 1.34 1.34 1.34 1.34 1.34 ... $ gdp_per_capita : num [1:78664] 1804 1804 1804 1804 1804 ... $ extreme_poverty : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ cardiovasc_death_rate : num [1:78664] 597 597 597 597 597 ... $ diabetes_prevalence : num [1:78664] 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 9.59 ... $ female_smokers : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ male_smokers : num [1:78664] NA NA NA NA NA NA NA NA NA NA ... $ handwashing_facilities : num [1:78664] 37.7 37.7 37.7 37.7 37.7 ... $ hospital_beds_per_thousand : num [1:78664] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... $ life_expectancy : num [1:78664] 64.8 64.8 64.8 64.8 64.8 ... $ human_development_index : num [1:78664] 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 0.511 ... - attr(*, &quot;spec&quot;)= .. cols( .. iso_code = col_character(), .. continent = col_character(), .. location = col_character(), .. date = col_date(format = &quot;&quot;), .. total_cases = col_double(), .. new_cases = col_double(), .. new_cases_smoothed = col_double(), .. total_deaths = col_double(), .. new_deaths = col_double(), .. new_deaths_smoothed = col_double(), .. total_cases_per_million = col_double(), .. new_cases_per_million = col_double(), .. new_cases_smoothed_per_million = col_double(), .. total_deaths_per_million = col_double(), .. new_deaths_per_million = col_double(), .. new_deaths_smoothed_per_million = col_double(), .. reproduction_rate = col_double(), .. icu_patients = col_double(), .. icu_patients_per_million = col_double(), .. hosp_patients = col_double(), .. hosp_patients_per_million = col_double(), .. weekly_icu_admissions = col_double(), .. weekly_icu_admissions_per_million = col_double(), .. weekly_hosp_admissions = col_double(), .. weekly_hosp_admissions_per_million = col_double(), .. new_tests = col_double(), .. total_tests = col_double(), .. total_tests_per_thousand = col_double(), .. new_tests_per_thousand = col_double(), .. new_tests_smoothed = col_double(), .. new_tests_smoothed_per_thousand = col_double(), .. positive_rate = col_double(), .. tests_per_case = col_double(), .. tests_units = col_character(), .. total_vaccinations = col_double(), .. people_vaccinated = col_double(), .. people_fully_vaccinated = col_double(), .. new_vaccinations = col_double(), .. new_vaccinations_smoothed = col_double(), .. total_vaccinations_per_hundred = col_double(), .. people_vaccinated_per_hundred = col_double(), .. people_fully_vaccinated_per_hundred = col_double(), .. new_vaccinations_smoothed_per_million = col_double(), .. stringency_index = col_double(), .. population = col_double(), .. population_density = col_double(), .. median_age = col_double(), .. aged_65_older = col_double(), .. aged_70_older = col_double(), .. gdp_per_capita = col_double(), .. extreme_poverty = col_double(), .. cardiovasc_death_rate = col_double(), .. diabetes_prevalence = col_double(), .. female_smokers = col_double(), .. male_smokers = col_double(), .. handwashing_facilities = col_double(), .. hospital_beds_per_thousand = col_double(), .. life_expectancy = col_double(), .. human_development_index = col_double(), .. .delim = &quot;,&quot; .. ) - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; 3.5.2 Actividad 2 media_casos_chile_enero_2021 &lt;- data %&gt;% filter(location == &quot;Chile&quot;) %&gt;% filter(date &gt;= &quot;2021-01-01&quot; &amp; date &lt;= &quot;2021-01-31&quot;) %&gt;% group_by(location) %&gt;% summarize(media_casos = mean(new_cases, na.rm = TRUE)) media_casos_chile_enero_2021 %&gt;% reactable::reactable() 3.5.3 Actividad 3 test_latinoamerica_ultimo_mes &lt;- data %&gt;% filter(continent == &quot;South America&quot;) %&gt;% filter(date &gt;= &quot;2021-01-10&quot; &amp; date &lt;= &quot;2021-02-10&quot;) %&gt;% filter(!is.na(new_tests)) %&gt;% group_by(location) %&gt;% summarize(total_test = sum(new_tests)) %&gt;% arrange(total_test) test_latinoamerica_ultimo_mes %&gt;% reactable::reactable() 3.5.4 Actividad 4 paises_europa_xmill &lt;- data %&gt;% filter(continent == &quot;Europe&quot;) %&gt;% filter(!is.na(new_cases_per_million)) %&gt;% group_by(location) %&gt;% summarize(cases_per_million = sum(new_cases_per_million)) %&gt;% arrange(desc(cases_per_million)) paises_europa_xmill %&gt;% reactable::reactable() 3.5.5 Actividad 5 casos_contientes_2_semanas &lt;- data %&gt;% filter(date &gt;= &quot;2021-01-27&quot; &amp; date &lt;= &quot;2021-02-10&quot;) %&gt;% filter(!is.na(new_cases)) %&gt;% group_by(continent) %&gt;% summarize(casos = sum(new_cases)) casos_contientes_2_semanas %&gt;% reactable::reactable() "],["gráficos-estáticos-con-ggplot2.html", "Capítulo 4 Gráficos estáticos con ggplot2 4.1 Primer gráfico con ggplot2 4.2 Aesthetics 4.3 Geoms 4.4 Labs 4.5 Lims 4.6 Temas 4.7 Gráfico ggplot como un objeto 4.8 Actividad 4.9 Solución de Actividad", " Capítulo 4 Gráficos estáticos con ggplot2 En esta sección podrás ver una guía introductoria a gráficos estáticos usando ggplot2. Sirve para hacer gráficos mucho más elegantes. Implementa el concepto de gramática de gráficos en capas. Cuenta con muchas opciones de personalización. Ve la clase que realicé en video desde el siguiente link. install.packages(&quot;ggplot2&quot;) require(ggplot2) Primero veamos las variables de la base de datos iris: iris %&gt;% str() &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 4.1 Primer gráfico con ggplot2 Los gráficos con ggplot2 suelen tener la siguiente estructura # Llamado a la función &quot;ggplot&quot; e indicar base de datos con la información a graficar ggplot(data = iris) + # Aesthetics: Cómo dibujar los distintos trazos, formas y colores del gráfico, &quot;Bosquejo&quot; aes(x = Sepal.Length, y = Petal.Length) + # Geom del gráfico que necesitamos ver (puntos, lineas, barras, etc.) geom_point() Podemos omitir el nombre de los parámetros una vez que tengamos más practica. ggplot(iris) + aes(Sepal.Length, Petal.Length) + geom_point() 4.2 Aesthetics Acá vamos a indicar que variables van en el gráfico, en conjunto a parámetros adicionales según lo que necesitemos. x: Variable que va en el eje X. y: Variable que va en el eje Y. color: Dentro de las aesthetics significa colorear según una variable categórica. fill: Dentro de las aesthetics significa rellenar de un color según una variable categórica. Ejemplo: Hacer un scatter plot de Sepal.Length y Petal.Length que coloree los puntos según Species. ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() 4.3 Geoms Indica que tipo de gráfico necesitamos ver. Entre las principales geoms se encuentran: 4.3.1 geom_point() Es el gráfico de dispersión. Recomendado para identificar visualmente relaciones entre variables. Ejemplo: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() 4.3.2 geom_line() Es el gráfico de lineas. Recomendado para graficar series de tiempo. Ejemplo: require(datasets) data(&quot;economics&quot;) economics %&gt;% str spec_tbl_df[,6] [574 x 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame) $ date : Date[1:574], format: &quot;1967-07-01&quot; ... $ pce : num [1:574] 507 510 516 512 517 ... $ pop : num [1:574] 198712 198911 199113 199311 199498 ... $ psavert : num [1:574] 12.6 12.6 11.9 12.9 12.8 11.8 11.7 12.3 11.7 12.3 ... $ uempmed : num [1:574] 4.5 4.7 4.6 4.9 4.7 4.8 5.1 4.5 4.1 4.6 ... $ unemploy: num [1:574] 2944 2945 2958 3143 3066 ... ggplot(data = economics) + aes(x = date, y = unemploy) + geom_line() 4.3.3 geom_histogram Es el histograma. Sirve para ver la distribución de una variable Ejemplo: Al ser solo una variable, solo hay que especificar un argumento en aes. ggplot(data = iris) + aes(x = Sepal.Length) + geom_histogram() 4.3.4 geom_boxplot Es el gráfico de caja y bigote. Sirve para ver la dispersión y cuartiles de una variable. Ejemplo: Al ser solo una variable, solo hay que especificar un argumento en aes. ggplot(data = iris) + aes(y = Sepal.Length, fill = Species) + geom_boxplot() 4.3.5 geom_bar Es el gráfico de barras. Sirve para ver con longitudes proporcionales a los valores que representan. Ejemplo: ggplot(data = iris) + aes(x = Species, fill = Species) + geom_bar() Argumentos de un geom: aes(): En caso de querer usar una aesthetic distinta a la usada anteriormente. color: Colorea el gráfico según el color que indiquemos. Ejemplo: ggplot(data = economics) + aes(x = date, y = unemploy) + geom_line(color = &quot;dodgerblue1&quot;) fill: Rellena el gráfico según el color que indiquemos. Ejemplo: ggplot(data = iris) + aes(x = Sepal.Length) + geom_histogram(fill = &quot;deepskyblue1&quot;) Podemos añadirle el argumento color para colorear los contornos con otro color: ggplot(data = iris) + aes(x = Sepal.Length) + geom_histogram(color = &quot;deepskyblue4&quot;, fill = &quot;deepskyblue3&quot;) linetype: Para indicar el tipo de linea que necesitamos en el gráfico. Ejemplo: ggplot(data = economics) + aes(x = date, y = unemploy) + geom_line(linetype = &quot;longdash&quot;) size: Cambia el tamaño de la geom del gráfico. Ejemplo: ggplot(iris) + aes(Sepal.Length, Petal.Length) + geom_point(size = 3) alpha: Añade transparencia a la geom gráfico. Ejemplo: Añadir un 50% de transparencia al gráfico. ggplot(data = iris) + aes(x = Sepal.Length) + geom_histogram(color = &quot;deepskyblue4&quot;, fill = &quot;deepskyblue3&quot;, alpha = 0.5) 4.4 Labs Es una capa para indicar las etiquetas de Eje y título en los gráficos. Ejemplo: ggplot(data = economics) + aes(x = date, y = unemploy) + geom_line(color = &quot;brown4&quot;, linetype = &quot;solid&quot;) + labs(x = &quot;Año&quot;, y = &quot;Desempleo&quot;, title = &quot;Desempleo a través del tiempo&quot;, subtitle = &quot;1965 a 2010&quot;) 4.5 Lims Es una capa para indicar los límites de los ejes. Ejemplo. ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + lims(x = c(6, 8), y = c(4, NA)) 4.6 Temas Sirve para establecer un tema de fondo: Los temas que se pueden usar por defecto con ggplot2 son: theme_gray: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_gray() theme_bw: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_bw() theme_linedraw: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_linedraw() theme_light: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_light() theme_dark: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_dark() theme_minimal: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_minimal() theme_classic: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_classic() theme_void: ggplot(data = iris) + aes(x = Sepal.Length, y = Petal.Length, color = Species) + geom_point() + theme_void() ¡Puedes buscar muchos temas más en internet! 4.7 Gráfico ggplot como un objeto Podemos guardar un gráfico ggplot como un objeto de R. Es muy eficiente. Ejemplos: 4.7.1 1. Distintos Geoms Guardamos el gráfico como una variable grafico_Sepal.Length &lt;- ggplot(data = iris) + aes(x = Sepal.Length) Luego construimos los gráficos: Histograma grafico_Sepal.Length + geom_histogram(color = &quot;dodgerblue4&quot;, fill = &quot;dodgerblue3&quot;, alpha = 0.5) + theme_bw() Boxplot grafico_Sepal.Length + geom_boxplot(aes(fill = Species)) + coord_flip() + # Voltear ejes theme_light() 4.7.2 2. Gráficos interactivos No funcionan en archivos .pdf. Creamos una variable con el gráfico: # install.packages(&quot;plotly&quot;) # require(plotly) tiempo_y_desempleo &lt;- ggplot(data = economics) + aes(x = date, y = unemploy) + geom_line(color = &quot;brown4&quot;, linetype = &quot;solid&quot;) + labs(x = &quot;Año&quot;, y = &quot;Desempleo&quot;, title = &quot;Desempleo a través del tiempo&quot;, subtitle = &quot;1965 a 2010&quot;) + theme_bw() Creamos gráfico interactivo: # install.packages(plotly) tiempo_y_desempleo %&gt;% plotly::ggplotly() 4.8 Actividad Usando la base de datos de siguiente link, genere un gráfico de lineas para ver la evolución de la cantidad de casos por día en Chile, Argentina y Perú en enero de 2021. ¡Personalizelo a su gusto! Hint: Use dplyr y magrittr. 4.9 Solución de Actividad require(dplyr) require(magrittr) require(ggplot2) require(plotly) data &lt;- vroom::vroom(here::here(&quot;data&quot;, &quot;covid&quot;, &quot;owid-covid-data.csv&quot;)) chile_arg_peru_01_2021 &lt;- data %&gt;% select(location, date, new_cases) %&gt;% filter(location %in% c(&quot;Chile&quot;, &quot;Argentina&quot;, &quot;Peru&quot;)) %&gt;% filter(date &gt;= &quot;2021-01-01&quot; &amp; date &lt;= &quot;2021-01-31&quot;) %&gt;% filter(!is.na(new_cases)) grafico_actividad &lt;- ggplot(data = chile_arg_peru_01_2021) + aes(x = date, y = new_cases, color = location) + geom_line(size = 1) + labs(x = &quot;Fecha&quot;, y = &quot;Casos Nuevos&quot;, title = &quot;Nuevos casos por día en enero 2021&quot;, subtitle = &quot;Chile, Argentina y Perú&quot;, caption = &quot;Figura 1&quot;) + theme_bw() + scale_color_manual(labels = c(&quot;Arg&quot;, &quot;Chi&quot;, &quot;Per&quot;), # Nombre de Leyendas values = c(&quot;deepskyblue&quot;, &quot;red&quot;, &quot;gray&quot;)) + # Color de Leyendas guides(color = guide_legend(&quot;País&quot;)) # Título de Leyendas grafico_actividad %&gt;% ggplotly() "],["reportes-con-r-markdown.html", "Capítulo 5 Reportes con R Markdown 5.1 La estructura YAML 5.2 Markdown 5.3 Chunks 5.4 Tablas desde R 5.5 Imágenes 5.6 Reportes automáticos 5.7 Actividad", " Capítulo 5 Reportes con R Markdown En esta sección explicaré cómo usar R Markdown, si así lo deseas, puedes ver la clase que hice sobre este tema en este link. Su función principal es la generación de informes, documentos o presentaciones. Es una herramienta muy potente ya que permite escribir código en muchos lenguajes de programación a través de estructuras llamadas chunks. Soporta el lenguaje Markdown. Es posible escribir expresiones matemáticas entre signos de dólar ($ $) usando LaTeX. También acepta la opción de doble signo dólar ($ $ $ $). 5.1 La estructura YAML Esta entre tres guiones medios por arriba y abajo (---) Es la configuración inicial de R Markdown. Algunos parámetros que pueden ir en la estructura YAML son: title: Es para especificar el título del R Markdown (no confundir con nombre del archivo con extensión .Rmd) subtitle: Es para especificar el subtítulo del R Markdown. author: Acá se especifica le autor del R Markdown. date: En este parámetro se indica la fecha en que se está escribiendo el R Markdown. output: Este parámetro hay que especificarlo obligatoriamente, pues acá indicamos cuál es el formato del archivo de salida. Ejemplos: Una estructura YAML con salida en formato html. --- title: Taller de Software Estadístico subtitle: Módulo 3 author: CA FMAT &amp; CEFMAT date: 17 de febrero output: html_document --- Podemos usar el lenguaje html para personalizar el documento. ¡Les invitamos a que busquen el tema html que más les guste! En prettydoc y rmdformats. Una estructura YAML con salida en formato pdf: --- title: Informe coronavirus en chile author: Comisión de salud date: 17 de julio 2021 output: pdf_document --- Podemos usar todas las funciones de LaTeX en este caso, ¡Puede ser muy provechoso! Les invitamos a encontrar más opciones de personalización acá. 5.2 Markdown Es un lenguaje de marcado que facilita la escritura de texto a través de simples carácteres. Resumen: Código Resultado # Texto Texto ## Texto Texto ### Texto Texto #### Texto Texto _cursiva_ cursiva __negrita__ negrita \\(\\text{[Google](http://www.google.cl)}\\) Google `codigo` codigo 1. Texto 1 2. Texto 2 3. Texto 3 4. Texto 4 Texto 1 Texto 2 Texto 3 Texto 4 * Texto 1 * Texto 2 * Texto 3 * Texto 4 Texto 1 Texto 2 Texto 3 Texto 4 5.2.1 Tablas Se pueden hacer tablas rápidamente usando barras verticales (|) y guiones medios (-) Para entender mejor cómo crear tablas veamos el siguiente ejemplo: Para crear la siguiente tabla: Edad Nacimientos Mujeres TFR por 1000 20 20 100 200 21 25 100 250 22 30 100 300 23 35 100 350 24 40 100 400 Total 150 500 1500 20-24 150 500 300 Debemos usar el siguiente código. | Edad | Nacimientos | Mujeres | TFR por 1000 | |-------|-------------|---------|--------------| | 20 | 20 | 100 | 200 | | 21 | 25 | 100 | 250 | | 22 | 30 | 100 | 300 | | 23 | 35 | 100 | 350 | | 24 | 40 | 100 | 400 | | Total | 150 | 500 | 1500 | | 20-24 | 150 | 500 | 300 | 5.3 Chunks La siguiente estructura es un chunk de R. ```{r} ``` Dentro podemos escribir código en en lenguaje que especifiquemos en la llave {}. Esto es un chunk con código de Python: ```{python} for i in range(3): \\(\\ \\ \\ \\ \\) print(i) ``` Podemos nombrar un chunk para trabajar con más orden: ```{r IMPORTAR DATOS} data &lt;- rio::import(datos.csv) ``` 5.3.1 Parámetros de un chunk Dentro de las llaves pueden ir los siguientes parámetros: echo: Cuando el argumento es FALSE, muestra el output pero no el código. include: Cuando es FALSE, no muestra ni el código ni el output. result: Cuando es FALSE, muestra el código pero no el resultado. message: Cuando es FALSE, no muestra mensajes provocados por la ejecución del código. warning: Cuando es FALSE, no muestra advertencias provocadas por el código. fig.align: Puede recibir como argumentos a center, right y left. Pueden ver más opciones en este enlace. Ejemplo: ```{r GRAFICO 1, echo=FALSE, fig.align = center} ggplot(iris) + \\(\\ \\ \\ \\ \\) aes(Sepal.Length, Petal.Length) + \\(\\ \\ \\ \\ \\) geom_point(color = brown4) ``` Mostrará en el output un gráfico centrado, pero no el código que lo produce. 5.3.2 El chunk setup Al crear un archivo R Markdown, se creará un chunk por defecto, abajo de la estructura YAML, llamado setup y tendrá como parámetro include=FALSE. Es muy importante, ya que incluye las configuraciones iniciales de los chunks. Dentro de la función knitr::opts_chunk$set, podemos escribir nuevos parámetros que se aplicarán a TODOS los chunks. Ejemplo: ``` {r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = center) ``` Además, podemos agregar los packages que usaremos durante la utilización de R Markdown: ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = center, comment = NA) # Packages require(tidyverse) require(DT) ``` 5.3.3 Chunks inline Son bastante útiles, nos permite usar un lenguaje de programación mientras escribimos. Su uso se debe hacer mediante acentos graves (` `) Debemos especificar el lenguaje que usaremos antes de usar código. Ejemplo: La media entre los números 2, 4 y 12 es ` r mean(c(2, 4, 12)) `. Producirá: La media entre los números 2, 4 y 12 es 6. Podemos llamar variables creadas anteriormente en el código. Ejemplo: media_Petal.Length &lt;- iris$Sepal.Length %&gt;% mean La media del largo de los pétalos de iris es ` r media_Petal.Length `. La media del largo de los pétalos de iris es 5.8433. 5.4 Tablas desde R En html, la mejor opción es usar la función reactable del package `reactable``, ya que es una opción interactiva. Ejemplo: grupos_iris &lt;- iris %&gt;% group_by(Species) %&gt;% summarize(max_Sepal.Length = max(Sepal.Length)) # require(DT) grupos_iris %&gt;% reactable::reactable() En formatos pdf, la mejor opción es usar la función kable del package knitr. Ejemplo # require(knitr) grupos_iris %&gt;% knitr::kable() Species max_Sepal.Length setosa 5.8 versicolor 7.0 virginica 7.9 Les invitamos a aprender más sobre tablas en el siguiente link. 5.5 Imágenes Podemos cargar imágenes usando la función include_graphics del package knitr. knitr::include_graphics(here::here(&quot;images&quot;, &quot;ejemplo.jpg&quot;)) 5.6 Reportes automáticos Se puede crear un template, e ir cambiando el argumento params. params es un parámetro de la estructura YAML. Muy útil para la generación de reportes automáticos. Ejemplo: --- title: Taller de Software Estadístico subtitle: Módulo 3 author: CA FMAT &amp; CEFMAT date: 17 de febrero output: html_document params: \\(\\ \\ \\)especie: setosa --- Creemos un histograma para la variable Sepal.Length, para la especie setosa de iris. require(magrittr) require(dplyr) require(ggplot2) iris_especie_Sepal.Length &lt;- iris %&gt;% filter(Species == params$especie) grafico_especie &lt;- ggplot(iris_especie_Sepal.Length) + aes(x = Sepal.Length) + geom_histogram(color = &quot;dodgerblue3&quot;, fill = &quot;dodgerblue4&quot;, alpha = 0.7) + labs(x = &quot;Sepal Length&quot;, y = &quot;Frecuencia&quot;, title = paste(&quot;Histograma de Sepal Lenth para la especie&quot;, params$especie, sep = &quot; &quot;)) + theme_bw() grafico_especie %&gt;% plotly::ggplotly() 5.7 Actividad Genere un reporte automático en R Markdown (formato html) que describa la situación en enero de 2021 respecto al coronavirus en Argentina, Chile y Perú. ¡Use toda su imaginación! "],["mis-proyectos.html", "Capítulo 6 Mis Proyectos 6.1 Visualización Interactiva del Coronavirus", " Capítulo 6 Mis Proyectos En esta sección quiero mostrar los principales proyectos que he realizado. 6.1 Visualización Interactiva del Coronavirus Mi principal motivación para realizar esta App interactiva realizada con Shiny y Flexdashboard, es mostrar a las personas, estadísticas interesantes sobre el Covid-19, incluso añadiendo la posibilidad de interactuar con los resultados. Puedes ingresar a la App desde este link. "],["palabras-finales.html", "Capítulo 7 Palabras Finales", " Capítulo 7 Palabras Finales ¡Espero que hayas disfrutado mucho el material! Esta es una pequeña base para empezar a investigar nuevos conocimientos en Estadística y Programación. ¡Tienes todo un mundo por descubrir! Te invito a explorarlo. writeLines(c(&#39;Realizado con cariño por Esteban Rucán Carrasco&#39;, &#39;¡Hasta pronto!&#39;)) Realizado con cariño por Esteban Rucán Carrasco ¡Hasta pronto! Si quieres agradecerme el material puedes hacerlo saber por Redes Sociales. Instagram Correo "],["referencias.html", "Capítulo 8 Referencias 8.1 Guía de Estilo", " Capítulo 8 Referencias 8.1 Guía de Estilo PEP 8: https://blogs.upm.es/estudiaciencia/pep-8-la-guia-de-estilo-para-python/ tidyverse: https://style.tidyverse.org/ "]]
